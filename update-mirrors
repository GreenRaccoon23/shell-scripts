#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

declare -r PACDIR="/etc/pacman.d"
declare -r PACNOW="mirrorlist"
declare Pacold="mirrorlist.pacold"
declare -r PACNEW="mirrorlist.pacnew"
declare -r PACTMP="mirrorlist.tmp"
declare -r PACBAK="mirrorlist.backup"

main() {

    if ! pushd "${PACDIR}" &>/dev/null; then
        fail "Failed to open directory '${PACDIR}'" $?
    fi

    if ! [[ -e "${PACNOW}" ]]; then
        fail "Missing file '${PACNOW}'" 1
    fi

    set_pacold

    echo 'Current mirrorlist:'
    print_pacnow

    echo
    echo 'Backing up current mirrorlist...'
    create_pacold

    echo
    echo 'Creating temporary list of United States servers...'
    create_pacnew
    filter_mirrors
    uncomment_mirrors

    echo
    echo 'Finding 6 fastest mirrors...'
    rank_mirrors

    echo
    echo 'New mirrorlist:'
    print_pacnow

    echo
    echo 'Backing up new mirrorlist...'
    create_pacbak

    popd &>/dev/null

    echo
    echo 'Success.'
}

set_pacold() {

    local -i i
    local generated

    for i in $(seq 1 1000); do
        generated="${Pacold}$i"
        ! [[ -e "${generated}" ]] && break
    done

    Pacold="${generated}"
}

print_pacnow() {

    if ! cat "${PACNOW}"; then
        fail "Failed to print '${PACNOW}'" $?
    fi

    return 0
}

create_pacold() {
    copy_file "${PACNOW}" "${Pacold}"
}

copy_file() {

    local src="$1"
    local dst="$2"

    echo "sudo cp -a \"${src}\" \"${dst}\""
    if ! sudo cp -a "${src}" "${dst}"; then
        fail "Unable to copy '${src}' to '${dst}'" $?
    fi

    return 0
}

create_pacnew() {
    [[ -e "${PACNEW}" ]] && return 0
    copy_file "${PACNOW}" "${PACNEW}"
}

filter_mirrors() {

    if ! sudo sed -n '/United States/,/##/{p}' "${PACNEW}" | sudo head -n -2 | sudo tee "${PACTMP}" &>/dev/null; then
        fail "Failed to remove all non-US mirrors from '${PACNEW}'" $?
    fi

    return 0
}

uncomment_mirrors() {

    if ! sudo sed -i 's/#Server/Server/' "${PACTMP}"; then
        fail "Failed to uncomment all mirrors in '${PACTMP}'" $?
    fi

    return 0
}

rank_mirrors() {

    echo "sudo rankmirrors -n 6 \"${PACTMP}\" > \"${PACNOW}\""
    if ! sudo rankmirrors -n 6 "${PACTMP}" | sudo tee "${PACNOW}" &>/dev/null; then
        fail "Failed to rank mirrors and record them in '${PACNOW}'" $?
    fi

    cat "${PACNOW}"
}

create_pacbak() {
    copy_file "${PACNOW}" "${PACBAK}"
}

err() {
    local msg="$1"
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: ${msg}" >&2
}

fail() {
    local msg="$1"
    local scode="$2"
    err "${msg}"
    exit "${scode}"
}

main
