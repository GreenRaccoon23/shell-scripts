#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

declare SRC

main() {

  set_src "$1"

  pushd "${SRC}" >/dev/null

  msg1 'Optimizing repos...'
  gc_groups

  popd >/dev/null
}

set_src() {
  SRC="$1"
  [[ -z "${SRC}" ]] && SRC="${PWD}"
  return 0
}

gc_groups() {

  local group

  while read -r group; do

    [[ ! -d "${group}" ]] && continue

    pushd "${group}" >/dev/null
    gc_group
    popd >/dev/null

  done < <(ls -A1)
}

gc_group() {

  local repo

  while read -r repo; do

    [[ ! -d "${repo}" ]] && continue

    pushd "${repo}" >/dev/null
    gc_repo "${repo}"
    popd >/dev/null

  done < <(ls -A1)
}

gc_repo() {

  local -r repo="$1"

  ! git_is_repo && return 0

  msg2 "Optimizing '${repo}'..."

  if ! git gc --aggressive; then
    fail $? "Failed to optimize repo '${repo}' with 'git gc --aggressive'"
  fi

  return 0
}

git_is_repo() {
  git branch &>/dev/null && return 0
  return 1
}

fail() {
  local -r scode="$1"
  local -r msg="$2"
  err "${msg}"
  exit "${scode}"
}

err() {
  local -r msg="$1"
  echo "[$(timestamp)]: ${msg}" >&2
}

msg1() {
  local -r msg="$1"
  echo "[$(timestamp)]: ${msg}"
}

msg2() {
  local -r msg="$1"
  local -r GREEN="$(tput setaf 2)"
  local -r RESET="$(tput sgr0)"

  echo "${GREEN}[$(timestamp)]: ${msg}${RESET}"
}

timestamp() {
  date +'%Y-%m-%d %H:%M:%S'
  # date +'%Y-%m-%dT%H:%M:%S%z'
  # date -u +'%Y-%m-%dT%H:%M:%SZ'
}

main "$@"
