#!/bin/bash

declare PGL="${1}";
declare -a ALL_DEVICES=();
declare DEVICE;
declare PERM;
declare CURR;


_main() {
    sudo -v;
    _setAllDevices;
    _chooseDevice;
    _findPerm;
    _findCurr;
    _changeMac;
};

_chooseDevice() {

    _c green;
    _printAllDevices;
    echo;
    echo '==> Enter device: ';
    echo "$(_line)";
    printf '==> ';
    _u;

    local -i choice;
    local -i i;
    read -p "" choice; # todo: validate
    i=$((${choice}-1));

    DEVICE="${ALL_DEVICES[${i}]}";
    DEVICE="$(echo "${DEVICE}" | sed 's/^[0-9]\+: \(.*\)/\1/')";
    # echo "${DEVICE}";
};

_setAllDevices() {
    local device;
    while read -r device; do
        ALL_DEVICES+=("${device}");
    done <<< "$(_listDevices)";
};

_listDevices() {
    ip link show |
        grep --color='never' "^[0-9]" |
        sed -re 's/([0-9].*?):.*/\1/';
};

_printAllDevices() {
    local device;
    for device in "${ALL_DEVICES[@]}"; do
        echo "${device}";
    done;
};

_findPerm() {
    PERM="$(sudo macchanger -s "${DEVICE}" | tail -n 1)";
    PERM="$(echo "${PERM}" | sed 's/^Permanent MAC:\s\+\([0-9A-Za-z:]*\)\s(.*/\1/')";
};

_findCurr() {
    CURR="$(sudo macchanger -s "${DEVICE}" | head -n 1)";
    CURR="$(echo "${CURR}" | sed 's/^Current MAC:\s\+\([0-9A-Za-z:]*\)\s(.*/\1/')";
};

_changeMac() {

    # nmcli d disconnect "${DEVICE}";
    # nmcli radio wifi off;
    sudo ip link set "${DEVICE}" down;

    if [ "${CURR}" = "${PERM}" ]; then
        sudo macchanger -a "${DEVICE}";
        [ -n "${PGL}" ] && _launchPglgui;
    else
        sudo macchanger -p "${DEVICE}";
    fi;

    # sleep 4s; # wait for other processes to notice

    # nmcli radio wifi on;
    # nmcli d connect "${DEVICE}";
    sudo ip link set "${DEVICE}" up;
};

_launchPglgui() {
    pglgui &>/dev/null &disown;
};

_c() {

    local -r name="${1}";
    local -Ar codes=(
        ["black"]="0"
        ["red"]="1"
        ["green"]="2"
        ["yellow"]="3"
        ["blue"]="4"
        ["magenta"]="5"
        ["cyan"]="6"
        ["white"]="7"
    );
    local -r code="${codes[$name]}"

    [ -n "${code}" ] && tput setaf "${code}";

    [ -z "${*:2}" ] && return 0;

    eval "${@:2}";
    _ifErr "Failed to run '${*:2}'";

    tput sgr0;
};

_u() {
    tput sgr0;
};

_line() {
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =;
};

_main;
