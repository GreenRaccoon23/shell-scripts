#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtraceadb
shopt -s extglob

declare -r ME="$0"
declare -r MY_NAME="${ME##*/}"
declare -r DST_DAD="/sdcard/adb"

main() {
  check_args "$@"
  verify_srcs "$@"
  adb_connect
  push_srcs "$@"
}

check_args() {

  (($# == 0)) && print_help 1

  local flag

  for flag in "$@"; do
    case "${flag}" in
      *(-)[hH] | *(-)[hH][eE][lL][pP]) print_help 0 ;;
    esac
  done
}

print_help() {
  cat <<EOH >&2
Run \`adb push\` and verify the integrity of the sent files.
Usage:
    ${MY_NAME} <files/directories>...
EOH

  local -ir scode=$1
  ((${scode} == 0)) && scode=0

  exit ${scode}
}

verify_srcs() {
  local src
  for src in "$@"; do
    [[ -e "${src}" ]] || fail 1 "'${src}' does not exist."
  done
}

adb_connect() {

  local connected
  connected="$(adb devices | head -2 | tail -1)"
  [[ -n "${connected}" ]] && return 0

  echo 'Waiting for Android device to connect...'
  ! adb wait-for-device && return 1

  echo 'Android device connected.'
}

push_srcs() {
  local src
  local -i i=-1
  for src in "$@"; do
    i=$((${i} + 1))
    ((${i} != 0)) && echo
    push_src "${src}"
  done
}

push_src() {

  local -r src_path="$1"

  local src_dad
  src_dad="$(dirname "${src_path}")"
  [[ "${src_dad}" == '.' ]] && src_dad=''

  local src_name
  src_name="$(basename "${src_path}")"

  pushd "${src_dad}" >/dev/null
  push_src_dynamic "${src_name}"
  popd >/dev/null
}

push_src_dynamic() {

  local -r src_name="$1"

  # h1 "${src_name}"
  h1 "Preparing to send '${src_name}' to '${DST_DAD}/${src_name}'"

  if [[ -d "${src_name}" ]]; then
    push_verify_dir "${src_name}"
  else
    push_verify_reg "${src_name}"
  fi

  msg1 "Successfully sent '${src_name}' to '${DST_DAD}/${src_name}'"
}

push_verify_dir() {

  local -r src_name="$1"
  local -r tar_name="${src_name}.tar"

  tar_src "${src_name}" "${tar_name}"
  push_verify_reg "${tar_name}"
  untar_dst "${tar_name}"
  rm_dst_tar "${tar_name}"
  rm_src_tar "${tar_name}"
}

push_verify_reg() {

  local -r src="$1"

  adb_push "${src}"
  veryify_pushed "${src}"
}

tar_src() {

  local -r src_dir="$1"
  local -r src_tar="$2"

  msg1 "Creating temporary tar archive of local directory..."
  tar_dynamic "${src_tar}" "${src_dir}" || fail $? "Failed to tar '${src_name}' to '${tar_name}'"
}

tar_dynamic() {

  local -r dir_name="$1"
  local -r tar_name="$2"
  local os
  os="$(uname)"

  if [[ "${os}" == "Darwin" ]]; then
    tar_mac "${dir_name}" "${tar_name}"
  else
    tar_standard "${dir_name}" "${tar_name}"
  fi
}

# note: This does not work. A tar archive created on a Mac filesytem cannot be
# extracted onto a different filesystem, even though that is one of the primary
# purposes of a tar archive in the first place. Someone probably has figured
# out a workaround, but I have not found it yet.
# todo: Figure out how to make a Mac create a tar archive that is not useless.
tar_mac() {
  local -r dir_name="$1"
  local -r tar_name="$2"
  echo "gtar -cf '${dir_name}' '${tar_name}'"
  gtar -cf "${dir_name}" "${tar_name}"
}

tar_standard() {
  local -r dir_name="$1"
  local -r tar_name="$2"
  echo "tar -cf '${dir_name}' '${tar_name}'"
  tar -cf "${dir_name}" "${tar_name}"
}

# Send the file to the Android device.
adb_push() {

  local -r src="$1"
  local -r dst="${DST_DAD}/${src}"

  # echo "Copying directory structure..."
  # adb_copy_dir_structure "${src}" "${DST_DAD}" || return $?

  msg1 "Sending '${src}' to '${dst}'..."
  echo "adb push -p '${src}' '${dst}'"
  adb push -p "${src}" "${dst}"
}

# # Make the directory structure on the Android device.
# adb_copy_dir_structure() {

#   local -r src="$1"
#   local -r dst_dad="$2"

#   # Return if no directory structure needs to be made.
#   [[ "${src}" = "." ]] && return 0
#   [[ ! -d "${src}" ]] && return 0

#   # Make the directory structure on the Android device.
#   find "${src}" -type d -exec adb shell mkdir -p "${dst_dad}/{}" \;
# }

# Check the md5sum of the sent Android file/directory.
veryify_pushed() {

  local -r src="$1"
  local -r dst="${DST_DAD}/${src}"

  msg1 'Verifying md5sums...'

  ! adb_file_exists "${dst}" && return 1

  local md5_src
  md5_src="$(md5sum_dynamic "${src}")"

  echo "  ${md5_src}  ${src}"

  local md5_dst
  md5_dst="$(adb_md5sum "${dst}")"

  echo "  ${md5_dst}  ${dst}"

  [[ "${md5_src}" != "${md5_dst}" ]] && return 1
  return 0
}

adb_file_exists() {

  local f="$1"
  local exists
  exists=$(adb shell "[ -e '${f}' ] && echo 0")

  [[ "${exists}" == '0' ]] && return 0
  return 1
}

md5sum_dynamic() {

  local -r f="$1"
  local os
  os="$(uname)"

  if [[ "${os}" == "Darwin" ]]; then
    md5sum_mac "${f}"
  else
    md5sum_standard "${f}"
  fi
}

md5sum_mac() {
  local -r f="$1"
  md5 -q "${f}"
}

md5sum_standard() {
  local -r f="$1"
  md5sum "${f}" | awk '{print $1}'
}

adb_md5sum() {
  local -r f="$1"
  adb shell "md5sum '${f}' | awk '{print \$1}'"
}

untar_dst() {

  local -r tar_name="$1"

  msg1 'Extracting temporary tar archive on device...'
  echo "adb shell \"cd '${DST_DAD}' && tar -xf '${tar_name}'\""
  # adb shell "cd '${DST_DAD}' && tar -xf '${tar_name}' >/dev/null 2>&1"
  adb shell "cd '${DST_DAD}' && tar -xf '${tar_name}'"
  # adb_exec_with_scode "cd '${DST_DAD}' && tar -xf '${tar_name}'" || fail "Failed to untar '${DST_DAD}/${tar_name}'" # `tar` throws weird `chown` errors
}

# # Work-around to get a status code from the adb shell.
# adb_exec_with_scode() {
#   local scode
#   scode="$(adb shell "$* >/dev/null 2>&1; printf '%d' \$?")"
#   return "${scode}"
# }

rm_dst_tar() {
  local -r tar_name="$1"
  msg1 'Removing temporary tar archive on device...'
  echo "adb shell \"rm '${DST_DAD}/${tar_name}'\""
  adb shell "rm '${DST_DAD}/${tar_name}'"
  # adb_exec_with_scode "rm '${DST_DAD}/${tar_name}'" || fail "Failed to remove '${DST_DAD}/${tar_name}'"
}

rm_src_tar() {
  local -r tar_name="$1"
  msg1 'Removing temporary tar archive of local directory...'
  # echo "rm '${tar_name}'"
  rm "${tar_name}" || fail $? "Failed to remove '${tar_name}'."
}

fail() {
  local -r scode="$1"
  local -r msg="$2"
  err "${msg}"
  exit "${scode}"
}

err() {
  local -r msg="$1"
  echo "[$(timestamp)]: ${msg}" >&2
}

msg1() {
  local -r msg="$1"
  echo "[$(timestamp)]: ${msg}"
}

h1() {
  local -r msg="$1"
  local -r GREEN="$(tput setaf 2)"
  local -r RESET="$(tput sgr0)"

  echo "${GREEN}[$(timestamp)]: ${msg}${RESET}"
}

timestamp() {
  date +'%Y-%m-%d %H:%M:%S'
  # date +'%Y-%m-%dT%H:%M:%S%z'
  # date -u +'%Y-%m-%dT%H:%M:%SZ'
}

main "$@"
