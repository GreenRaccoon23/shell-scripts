#!/bin/zsh

source lib-colors;
source lib-exec-opts;
source lib-input;
source lib-fmt;

declare -r SCRIPT_PATH="$0";
declare -r SCRIPT_NAME="${SCRIPT_PATH##*/}";

declare -a StringArgs;

declare -i DoWipe;

# declare ImgArchive;
declare ImgZip;
declare ImgName;
declare ImgDir;

declare -r TWRP_IMG="twrp-2.8.7.1-shamu.img";

_init() {
    _getopts "$@";
}

_main() {
    _findImageName;
    _c green echo "${ImgName}";

    _extractZip;

    _rebootToBootloader;

    _eraseSystemPartitions;

    _flashBootloader;
    _flashRadio;

    _flashImage;

    echo "Success!";
    echo "Manually boot into recovery, install SuperSU, and then install kernel (optional)";
}

# Print help and exit.
_help() {
    local bin="${HOME}/bin"
    cat << EOH >&2
${SCRIPT_NAME}
DESCRIPTION:
  Flash a factory Android image to an Android device
  without wiping user data.
USAGE:
  ${SCRIPT_NAME} [<android-image-file-or-directory>]
NOTE:
  If the image file or directory is not specified,
  the current directory is assumed to include an image file.
EOH

    [ -n "${1}" ] &&
        exit "${1}";
    exit 1;
}

# Analyze user arguments.
_getopts() {
    # Declare arrays for commandline bool switches and string options.
    local -a BoolOpts;
    local -a StringOpts;

    # Iterate over user arguments.
    local -i i;
    local flag;
    for i in $(seq 1 $#); do
        eval flag="\$$i";
        case "${flag}" in
            *(-)[hH]*([eE][lL][pP]) )
                _help;
                ;;
            *(-)[wW]*([iI][pP][eE]) )
                BoolOpts[0]=1;
                ;;
            *(-)[fF]*([oO][rR][cC][eE]) )
                BoolOpts[0]=1;
                ;;
            * )
                StringOpts+=( "${flag}" );
                ;;
        esac;
    done;

    # Set bool options.
    DoWipe="${BoolOpts[0]}";

    # Set string options.
    StringArgs+=( "${StringOpts[@]}" );
}

# Reboot Android device to bootloader.
_rebootToBootloader() {
    _q adb get-state;
    if [ $? != 0 ]; then
        return;
    fi;

    adb reboot-bootloader;
}

# Find the name of the Android image from the 'image*.zip' file.
_findImageName() {
    ImgZip="$(ls image*.zip)";

    if [ -z "${ImgZip}" ]; then
        _chkerr "No 'image*.zip' file found";
    fi;

    ImgName="$(_rmExt "${ImgZip}" ".zip")";

    ImgDir="${ImgName}";
}

# Extract the 'image*.zip' file.
_extractZip() {
    if [ -d "${ImgDir}" ]; then
        return 0;
    fi;

    echo "Unzipping '${ImgZip}'...";
    unzip "${ImgZip}" -d "${ImgDir}";
}

# Clear non-firmware partitions except for user data.
# Clear boot, cache, recovery, and system.
_eraseSystemPartitions() {
    echo "Erasing partitions...";
    fastboot erase boot;
    fastboot erase cache;
    fastboot erase recovery;
    fastboot erase system;
}

# Flash bootloader firmware.
_flashBootloader() {
    echo "Flashing bootloader...";
    fastboot flash bootloader bootloader-*.img;
    _chkerr "Failed to flash bootloader";
    fastboot reboot-bootloader;
    sleep 5;
}

# Flash radio firmware.
_flashRadio() {
    echo "Flashing radio...";
    fastboot flash radio radio-*.img;
    _chkerr "Failed to flash radio";
    fastboot reboot-bootloader;
    sleep 5;
}

# Flash image partitions except for user data.
# Clear boot, cache, recovery, and system.
_flashImage() {
    echo "Flashing '${ImgName}'...";
    _q pushd "${ImgDir}";

    fastboot flash system system.img;
    _chkerr "Failed to flash system";

    fastboot flash boot boot.img;
    _chkerr "Failed to flash boot";

    fastboot flash cache cache.img;
    _chkerr "Failed to flash cache";

    # fastboot flash recovery recovery.img
    if [ -e "${TWRP_IMG}" ]; then
        fastboot flash recovery "${TWRP_IMG}";
    elif [ -e "../${TWRP_IMG}" ]; then
        fastboot flash recovery "../${TWRP_IMG}";
    elif [ -e "../../${TWRP_IMG}" ]; then
        fastboot flash recovery "../../${TWRP_IMG}";
    fi;
    _chkerr "Failed to flash recovery";

    _q popd;
}

_init "$@";
_main;
